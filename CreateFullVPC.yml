# Create a complete full VPC with Public/Private Subnets, Internet Gateway & NAT Gateway.
Resources:
  TestVPC:
    Description: TEST VPC in AWS cloud.
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref SuperCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
  # Create a public Subnet.
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVPC
      CidrBlock: !Ref PublicSubnet01
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet
  # Create a Private Subnet.
  PrivateSubnet:
    Description: This is the 1st public ip subnet.
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVPC
      CidrBlock: !Ref PrivateSubnet01
      Tags:
        - Key: Name
          Value: PrivateSubnet
  # Create an Internet Gateway.
  InternetGateway:
    Description: Internet Gateway for the VPC.
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TestVPC Internet Gateway
  # Attach the Internet Gateway to VPC.
  InternetGatewayAttachment:
    Description: Attach the internet Gateway.
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      # which Gateway to attach to the VPC.
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: TestVPC
  # Create an Elastic ip for NAT.
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  # Create a NATGateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      # Assign the newly created EIP to this NATGateway.
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      # Reference the subnet that the NATGateway is attached to. "Always a public subnet".
      SubnetId: !Ref PublicSubnet
# Create a Routetable.
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref TestVPC
  # Create a route within the above route table.
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  # Associate the above route to the newly created RouteTable.
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TestVPC
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
#Define parameters that can be used within the resources.
Parameters:
  SuperCidr:
    Description: Main SuperSubnet
    Type: String
    Default: 10.0.0.0/16
  # This is the first Public subnet within the VPC.
  PublicSubnet01:
    Description: Public Subnet Directly connected to Internet Gateway.
    Type: String
    Default: 10.0.1.0/24
  # This is the first private subnet within the VPC.
  PrivateSubnet01:
    Description: This is the private subnet attached to a NAT Gateway.
    Type: String
    Default: 10.0.3.0/24
# Print the output of Resources created.
Outputs:
  VPCoutput:
    Description: VPC Test
    Value: !Ref TestVPC
  PublicSubnet:
    Description: Public Subnet
    Value: !Ref PublicSubnet